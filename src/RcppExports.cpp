// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "gprcpp_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// MtM
inline MatrixXd MtM(const MapMatd& M);
RcppExport SEXP _gprcpp_MtM(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MapMatd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(MtM(M));
    return rcpp_result_gen;
END_RCPP
}
// A_solve
inline MatrixXd A_solve(const MapMatd& M);
RcppExport SEXP _gprcpp_A_solve(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MapMatd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(A_solve(M));
    return rcpp_result_gen;
END_RCPP
}
// A_solve_B
inline MatrixXd A_solve_B(const MapMatd& A, const MapMatd& B);
RcppExport SEXP _gprcpp_A_solve_B(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MapMatd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const MapMatd& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(A_solve_B(A, B));
    return rcpp_result_gen;
END_RCPP
}
// A_solve_B_simple
inline MatrixXd A_solve_B_simple(const MapMatd& A, const MapMatd& B);
RcppExport SEXP _gprcpp_A_solve_B_simple(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MapMatd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const MapMatd& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(A_solve_B_simple(A, B));
    return rcpp_result_gen;
END_RCPP
}
// symm_distance_matrix
inline MatrixXd symm_distance_matrix(const MapMatd& A);
RcppExport SEXP _gprcpp_symm_distance_matrix(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MapMatd& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(symm_distance_matrix(A));
    return rcpp_result_gen;
END_RCPP
}
// distance_matrix
inline MatrixXd distance_matrix(const MapMatd& A, const MapMatd& B);
RcppExport SEXP _gprcpp_distance_matrix(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MapMatd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const MapMatd& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(distance_matrix(A, B));
    return rcpp_result_gen;
END_RCPP
}
// symm_distance_matrix_old
NumericMatrix symm_distance_matrix_old(NumericMatrix m1);
RcppExport SEXP _gprcpp_symm_distance_matrix_old(SEXP m1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m1(m1SEXP);
    rcpp_result_gen = Rcpp::wrap(symm_distance_matrix_old(m1));
    return rcpp_result_gen;
END_RCPP
}
// k_y_nugget
inline MatrixXd k_y_nugget(const MapMatd& A, const double phi, const double nu, const double nugget);
RcppExport SEXP _gprcpp_k_y_nugget(SEXP ASEXP, SEXP phiSEXP, SEXP nuSEXP, SEXP nuggetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MapMatd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double >::type nugget(nuggetSEXP);
    rcpp_result_gen = Rcpp::wrap(k_y_nugget(A, phi, nu, nugget));
    return rcpp_result_gen;
END_RCPP
}
// k_A_B
inline MatrixXd k_A_B(const MapMatd& A, const MapMatd& B, const double phi, const double nu, const double nugget);
RcppExport SEXP _gprcpp_k_A_B(SEXP ASEXP, SEXP BSEXP, SEXP phiSEXP, SEXP nuSEXP, SEXP nuggetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MapMatd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const MapMatd& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double >::type nugget(nuggetSEXP);
    rcpp_result_gen = Rcpp::wrap(k_A_B(A, B, phi, nu, nugget));
    return rcpp_result_gen;
END_RCPP
}
// gp_mean
inline MatrixXd gp_mean(const MapMatd K_y_nug, const MapMatd K_A_B, const MapMatd y);
RcppExport SEXP _gprcpp_gp_mean(SEXP K_y_nugSEXP, SEXP K_A_BSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MapMatd >::type K_y_nug(K_y_nugSEXP);
    Rcpp::traits::input_parameter< const MapMatd >::type K_A_B(K_A_BSEXP);
    Rcpp::traits::input_parameter< const MapMatd >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(gp_mean(K_y_nug, K_A_B, y));
    return rcpp_result_gen;
END_RCPP
}
// gp_cov
inline MatrixXd gp_cov(const MapMatd K_y_nug, const MapMatd K_new, const MapMatd K_A_B);
RcppExport SEXP _gprcpp_gp_cov(SEXP K_y_nugSEXP, SEXP K_newSEXP, SEXP K_A_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MapMatd >::type K_y_nug(K_y_nugSEXP);
    Rcpp::traits::input_parameter< const MapMatd >::type K_new(K_newSEXP);
    Rcpp::traits::input_parameter< const MapMatd >::type K_A_B(K_A_BSEXP);
    rcpp_result_gen = Rcpp::wrap(gp_cov(K_y_nug, K_new, K_A_B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gprcpp_MtM", (DL_FUNC) &_gprcpp_MtM, 1},
    {"_gprcpp_A_solve", (DL_FUNC) &_gprcpp_A_solve, 1},
    {"_gprcpp_A_solve_B", (DL_FUNC) &_gprcpp_A_solve_B, 2},
    {"_gprcpp_A_solve_B_simple", (DL_FUNC) &_gprcpp_A_solve_B_simple, 2},
    {"_gprcpp_symm_distance_matrix", (DL_FUNC) &_gprcpp_symm_distance_matrix, 1},
    {"_gprcpp_distance_matrix", (DL_FUNC) &_gprcpp_distance_matrix, 2},
    {"_gprcpp_symm_distance_matrix_old", (DL_FUNC) &_gprcpp_symm_distance_matrix_old, 1},
    {"_gprcpp_k_y_nugget", (DL_FUNC) &_gprcpp_k_y_nugget, 4},
    {"_gprcpp_k_A_B", (DL_FUNC) &_gprcpp_k_A_B, 5},
    {"_gprcpp_gp_mean", (DL_FUNC) &_gprcpp_gp_mean, 3},
    {"_gprcpp_gp_cov", (DL_FUNC) &_gprcpp_gp_cov, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_gprcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
